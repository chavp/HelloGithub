@{
    ViewBag.Title = "Sprite Demonstration";
}
<style type="text/css">
    .draw-target {
        width:400px;
        height:400px;
        position:relative;
        float:left;
        margin:5px;
    }
</style>
<h2>Sprites</h2>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<div class="draw-target"></div>
<script type="text/javascript">
    //We insert the plug-in here
    ;(function ($) {
        $.fn.bouncyPlugin = function (option) {
            var DHTMLSprite = function (params) {
                var width = params.width,
                height = params.height,
                imagesWidth = params.imagesWidth,
                $element = params.$drawTarget.append('<div/>').find(':last'),
                elemStyle = $element[0].style,
                // Store a local reference to the Math.floor function for faster access.
                mathFloor = Math.floor;
                $element.css({
                    position: 'absolute',
                    width: width,
                    height: height,
                    backgroundImage: 'url(' + params.images + ')'
                });

                var that = {
                    draw: function (x, y) {
                        elemStyle.left = x + 'px';
                        elemStyle.top = y + 'px';
                    },
                    changeImage: function (index) {
                        index *= width;
                        var vOffset = -mathFloor(index / imagesWidth) * height;
                        var hOffset = -index % imagesWidth;
                        elemStyle.backgroundPosition = hOffset + 'px ' + vOffset + 'px';
                    },
                    show: function () {
                        elemStyle.display = 'block';
                    },
                    hide: function () {
                        elemStyle.display = 'none';
                    },
                    destroy: function () {
                        $element.remove();
                    }
                };
                // Return the instance of DHTMLSprite.
                return that;
            };

            var timeInfo = function (goalFPS) {
                var oldTime,
                    paused = true,
                    interCount = 0,
                    totalFPS = 0,
                    totalCoeff = 0;
                return {
                    getInfo: function () {
                        if (paused === true) {
                            paused = false;
                            oldTime = +new Date();
                            return {
                                elapsed: 0,
                                coeff: 0,
                                FPS: 0,
                                averageFPS: 0,
                                averageCoeff: 0
                            };
                        }
                        var newTime = +new Date();  // get time in milliseconds
                        var elapsed = newTime - oldTime;
                        oldTime = newTime;
                        var FPS = 1000 / elapsed;
                        interCount++;
                        totalFPS += FPS;
                        var coeff = goalFPS / FPS;
                        totalCoeff += coeff;
                        return {
                            elapsed: elapsed,
                            coeff: goalFPS / FPS,
                            FPS: FPS,
                            averageFPS: totalFPS / interCount,
                            averageCoeff: totalCoeff / interCount
                        };
                    },
                    pause: function () {
                        paused = true;
                    }
                };
            };

            var bouncySprite = function (params) {
                var x = params.x,
                    y = params.y,
                    xDir = params.xDir,
                    yDir = params.yDir,
                    maxX = params.maxX,
                    maxY = params.maxY,
                    animIndex = 0,
                    that = DHTMLSprite(params);
                that.moveAndDraw = function (tCoeff) {
                    x += xDir * tCoeff;
                    y += yDir * tCoeff;
                    animIndex += xDir > 0 ? 1 * tCoeff : -1 * tCoeff;
                    var animIndex2 = (animIndex % 5) >> 0;
                    animIndex2 += animIndex2 < 0 ? 5 : 0;
                    if ((xDir < 0 && x < 0) || (xDir > 0 && x >= maxX)) {
                        xDir = -xDir;
                    }
                    if ((yDir < 0 && y < 0) || (yDir > 0 && y >= maxY)) {
                        yDir = -yDir;
                    }
                    that.changeImage(animIndex2);
                    that.draw(x, y);
                };

                return that;
            };

            var bouncyBoss = function (numBouncy, $drawTarget) {
                var bouncys = [], timer = timeInfo(40);
                for (var i = 0; i < numBouncy; i++) {
                    bouncys.push(bouncySprite({
                        images: '/images/cogs.png',
                        imagesWidth: 256,
                        width: 64,
                        height: 64,
                        $drawTarget: $drawTarget,
                        x: Math.random() * ($drawTarget.width() - 64),
                        y: Math.random() * ($drawTarget.height() - 64),
                        xDir: Math.random() * 4 - 2,
                        yDir: Math.random() * 4 - 2,
                        maxX: $drawTarget.width() - 64,
                        maxY: $drawTarget.height() - 64
                    }));
                }
                var moveAll = function () {
                    var timeData = timer.getInfo();
                    var len = bouncys.length;
                    for (var i = 0; i < len; i++) {
                        bouncys[i].moveAndDraw(timeData.coeff);
                    }
                    setTimeout(moveAll, 10);
                }
                // Call the moveAll() function to start.
                moveAll();
            };

            option = $.extend({}, $.fn.bouncyPlugin.defaults, option);
            return this.each(function () {
                var $drawTarget = $(this);
                $drawTarget.css('background-color', option.bgColor);
                bouncyBoss(option.numBouncy, $drawTarget);
            });
        };
        $.fn.bouncyPlugin.defaults = {
            bgColor: '#f00',
            numBouncy: 10
        };
    })(jQuery);

    $(function () {
        $('.draw-target').bouncyPlugin({
            numBouncy: 20,
            bgColor: '#8ff'
        });
    });
</script>